#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
/**
 * Module dependencies.
 */
let startApp = require(path.resolve(__dirname, '../src/app')); // 引入启动函数
startApp().then(app => {
  let debug = require('debug')('helloworld:server');
  // let http = require('http');

  let privateKey  = fs.readFileSync(path.resolve(process.cwd(),'asset/private.pem'), 'utf8');
  let certificate = fs.readFileSync(path.resolve(process.cwd(),'asset/file.crt'), 'utf8');
  let credentials = {key: privateKey, cert: certificate};

  console.log('ssl', privateKey, certificate)

  // let http = require('http');
  let https = require('https');

  /**
   * Get port from environment and store in Express.
   */
  const config = require(path.resolve(process.cwd(), 'config'));
  // console.log('config', config)
  let port = normalizePort(process.env.PORT || config.port);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  // let server = http.createServer(app);

  let server = https.createServer(credentials, app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, () => {
    console.log(`server 启动! 开始监听${port}端口`)
  });

  server.on('error', onError);
  server.on('listening', onListening);


  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}, err => {
  console.log('error:', err)
})